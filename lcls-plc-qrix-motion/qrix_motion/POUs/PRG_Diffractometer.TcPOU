<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="PRG_Diffractometer" Id="{47cc6d87-f16c-4ab2-afb0-97aaa2cfa842}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_Diffractometer
VAR
    fb_Diff_Theta : FB_MotionStage;
    fb_Diff_2Theta : FB_MotionStage;
    fb_Diff_2ThetaY : FB_MotionStage;
    fb_Diff_Chi : FB_MotionStage;
    fb_Diff_Phi : FB_MotionStage;
    fb_Diff_X : FB_MotionStage;
    fb_Diff_Y : FB_MotionStage;
    fb_Diff_Z : FB_MotionStage;
    bInit : BOOl := TRUE;

    //EPS
    EPS_Diff_Z : FB_EPS;

    EPS_Diff_Chi : FB_EPS;

    EPS_Diff_Phi : FB_EPS;

    EPS_Diff_Theta : FB_EPS;

    EPS_Diff_2Theta : FB_EPS;

    EPS_Diff_2ThetaY : FB_EPS;

    //Encoders for rotary stages
    fbSetPosition: MC_SetPosition;
    fb2ThetaAutoCoupling: FB_GantryAutoCoupling;
    couple : MC_GEARIN;
    decouple : MC_GEAROUT;
    bExecuteCouple: BOOL := TRUE;
    bExecuteDecouple: BOOL := FALSE;
    n2Theta AT %Q* :ULINT;
    r2Theta:LREAL;
    temp:ULINT;
    rtemp:LREAL;
    GantryDiff:REAL;

    fb_Diff_2Theta_Encoder : FB_MotionStage;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF ( bInit) THEN
    bInit := FALSE;
    Main.M28.bHardwareEnable := TRUE;
    Main.M28.bPowerSelf := TRUE;
    Main.M28.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M28.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
    Main.M28.fVelocity := 0.1;

    Main.M29.bHardwareEnable := TRUE;
    Main.M29.bPowerSelf := TRUE;
    Main.M29.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M29.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
    Main.M29.fVelocity := 0.1;

    Main.M30.bHardwareEnable := TRUE;
    Main.M30.bPowerSelf := TRUE;
    Main.M30.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M30.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
    Main.M30.fVelocity := 0.1;

    Main.M31.bHardwareEnable := TRUE;
    Main.M31.bPowerSelf := TRUE;
    Main.M31.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M31.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
    Main.M31.fVelocity := 0.1;

    Main.M32.bHardwareEnable := TRUE;
    Main.M32.bPowerSelf := TRUE;
    Main.M32.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M32.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
    Main.M32.fVelocity := 0.1;

    Main.M33.bHardwareEnable := TRUE;
    Main.M33.bPowerSelf := TRUE;
    Main.M33.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M33.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
    Main.M33.fVelocity := 0.1;

    Main.M34.bHardwareEnable := TRUE;
    Main.M34.bPowerSelf := TRUE;
    Main.M34.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M34.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
    Main.M34.fVelocity := 0.1;

    Main.M35.bHardwareEnable := TRUE;
    Main.M35.bPowerSelf := TRUE;
    Main.M35.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M35.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
    Main.M35.fVelocity := 0.1;

END_IF

//EPS
(*
// All bits must be TRUE to enable the specifiied direction (backward or forwards)
// The bits are populated right to left in typhos screen. So Descriptions highest bit number is at the beginning of the description.
EPS_Diff_Theta(eps:=Main.M34.stEPSBackwardEnable);
EPS_Diff_Theta.setDescription('CHI;MIDIR;PHI'); // SET DESCRIPTION FOR BYTE INDICATOR LABELS
// Diffractometer Theta cannot go less than 5 degrees if the Diffractometer Chi is less than -5 degrees
EPS_Diff_Theta.setBit(nBits:= 2, bValue:=Main.M34.fPosition>=5 OR Main.M33.fPosition>=-5);
// Diffractometer Theta cannot go less than 10 degrees if the MID IR (LAS VIS) is IN, which is defined as a position of 90 +/- 1.
EPS_Diff_Theta.setBit(nBits:= 1, bValue:= Main.M34.fPosition>10 OR F_Limit(Main.M36.fPosition, 91, 89, false));
// Diffractometer Theta cannot go less than 10 degrees if the Diffractometer phi is at 90 +/- 1.
EPS_Diff_Theta.setBit(nBits:= 0, bValue:=Main.M34.fPosition>10 OR F_Limit(Main.M32.fPosition, 91, 89, false));

EPS_Diff_Chi(eps:=Main.M33.stEPSBackwardEnable);
EPS_Diff_Chi.setDescription('Theta'); // SET DESCRIPTION FOR BYTE INDICATOR LABELS
// Diffractometer Chi cannot go less than -5 degrees if the Diffractometer Theta is less than 5 degrees
EPS_Diff_Chi.setBit(nBits:= 0, bValue:=Main.M33.fPosition>=-5 OR Main.M34.fPosition>=5);

EPS_Diff_Phi(eps:=Main.M32.stEPSBackwardEnable);
EPS_Diff_Phi.setDescription('Less_45;MID_IR;Theta'); // SET DESCRIPTION FOR BYTE INDICATOR LABELS
//
EPS_Diff_Phi.setBit(nBits:= 2, bValue:=Main.M32.fPosition<=45);
EPS_Diff_Phi.setBit(nBits:= 1, bValue:=Main.M36.fPosition <45 OR Main.M32.fPosition<=45);
EPS_Diff_Phi.setBit(nBits:= 0, bValue:=Main.M32.fPosition<=45 OR (Main.M34.fPosition <0.1 AND Main.M34.fPosition>359.5));

EPS_Diff_Z(eps:=Main.M30.stEPSBackwardEnable);
EPS_Diff_Z.setDescription('Less20mm;LAS_D_H'); // SET DESCRIPTION FOR BYTE INDICATOR LABELS
EPS_Diff_Z.setBit(nBits:= 0, bValue:=Main.M36.fPosition>=-20);
EPS_Diff_Z.setBit(nBits:= 1, bValue:=Main.M37.fPosition>=50 OR Main.M30.fPosition>=-20);
*)


fb_Diff_X(stMotionStage:=Main.M28);
fb_Diff_Y(stMotionStage:=Main.M29);
fb_Diff_Z(stMotionStage:=Main.M30);
fb_Diff_2ThetaY(stMotionStage:=Main.M31);
fb_Diff_Phi(stMotionStage:=Main.M32);
fb_Diff_Chi(stMotionStage:=Main.M33);
fb_Diff_Theta(stMotionStage:=Main.M34);
fb_Diff_2Theta(stMotionStage:=Main.M35);
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>