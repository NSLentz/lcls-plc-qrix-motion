<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="PRG_SSL" Id="{35c5b597-c1e5-471b-bc57-49572aa20da4}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_SSL
VAR
    fb_SSL_Motor : FB_MotionStage;
    (*EPS Limit switches*)
    {attribute 'TcLinkTo' := 'TIIB[EL1004_02_03]^Channel 2^Input'}
    bLimitBackwardEnable AT %I* :BOOL;
    {attribute 'TcLinkTo' := 'TIIB[EL1004_02_03]^Channel 3^Input'}
    bLimitForwardEnable AT %I* :BOOL;
    {attribute 'pytmc' := 'pv: QRIX:SPCA:COUPLED'}

    bAlreadyCoupled :BOOL := FALSE;
    bExecuteCouple :BOOL := TRUE;
    // Current coupled motion difference
    nCurrGantryDiff : LINT;
    // Autocoupling  Axes
    couple : MC_GEARIN;
    bInitComplete : BOOL;
    bInit : BOOl := TRUE;
END_VAR

VAR CONSTANT
    // Encoder reference values in counts ???!!! degrees?!!
    // Enc Ref Vals from alignment
    nSSL_ENC_REF : ULINT := 16171800;
    nSPCA_ENC_REF : ULINT := 14866900;
    nGANTRY_TOLERANCE : LINT := 100; // default gantry tolerance in encoder counts = units???

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF ( bInit) THEN
    bInit := FALSE;
    Main.M1.bPowerSelf := TRUE;
    Main.M1.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M1.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
END_IF
// couple axes

// Couple both axes
// Auto-coupling at init and auto-reset of coupling boolean
(*bExecuteCouple S= NOT bInitComplete;

bExecuteCouple R= couple.Busy OR bAlreadyCoupled;
couple (Master:= Main.M1.Axis,
        Slave:=Main.M25.Axis,
        Execute:=bExecuteCouple,
        RatioNumerator := 1,
        RatioDenominator :=1
);

bInitComplete S= bAlreadyCoupled;
nCurrGantryDiff := ((ULINT_TO_LINT(Main.M1.nRawEncoderULINT) - ULINT_TO_LINT(nSSL_ENC_REF)) - (ULINT_TO_LINT(Main.M25.nRawEncoderULINT) - ULINT_TO_LINT(nSSL_ENC_REF)));

*)
//EPS needs to be implemented and coupling of axes servo and wheel from spectometer arm
// hpw to recover from this situation?!
//Main.M1.bHardwareEnable := bLimitBackwardEnable AND bLimitForwardEnable AND (ABS(nCurrGantryDiff) > nGANTRY_TOLERANCE); //Include STO from SPCA
//Main.M1.bHardwareEnable := bLimitBackwardEnable AND bLimitForwardEnable;
fb_SSL_Motor(stMotionStage:=Main.M1);]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>